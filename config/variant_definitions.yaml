cnv_dummy_values:
  DUP: 0.58
  DEL: -1

refseq_chromosomes: # GRCh38.p13
  chr1:
    chr: "1"
    genbank_id: "CM000663.2"
    refseq_id: "NC_000001.11"
    length: 248956422
  chr2:
    chr: "2"
    genbank_id: "CM000664.2"
    refseq_id: "NC_000002.12"
    length: 242193529
  chr3:
    chr: "3"
    genbank_id: "CM000665.2"
    refseq_id: "NC_000003.12"
    length: 198295559
  chr4:
    chr: "4"
    genbank_id: "CM000666.2"
    refseq_id: "NC_000004.12"
    length: 190214555
  chr5:
    chr: "5"
    genbank_id: "CM000667.2"
    refseq_id: "NC_000005.10"
    length: 181538259
  chr6:
    chr: "6"
    genbank_id: "CM000668.2"
    refseq_id: "NC_000006.12"
    length: 170805979
  chr7:
    chr: "7"
    genbank_id: "CM000669.2"
    refseq_id: "NC_000007.14"
    length: 159345973
  chr8:
    chr: "8"
    genbank_id: "CM000670.2"
    refseq_id: "NC_000008.11"
    length: 145138636
  chr9:
    chr: "9"
    genbank_id: "CM000671.2"
    refseq_id: "NC_000009.12"
    length: 138394717
  chr10:
    chr: "10"
    genbank_id: "CM000672.2"
    refseq_id: "NC_000010.11"
    length: 133797422
  chr11:
    chr: "11"
    genbank_id: "CM000673.2"
    refseq_id: "NC_000011.10"
    length: 135086622
  chr12:
    chr: "12"
    genbank_id: "CM000674.2"
    refseq_id: "NC_000012.12"
    length: 133275309
  chr13:
    chr: "13"
    genbank_id: "CM000675.2"
    refseq_id: "NC_000013.11"
    length: 114364328
  chr14:
    chr: "14"
    genbank_id: "CM000676.2"
    refseq_id: "NC_000014.9"
    length: 107043718
  chr15:
    chr: "15"
    genbank_id: "CM000677.2"
    refseq_id: "NC_000015.10"
    length: 101991189
  chr16:
    chr: "16"
    genbank_id: "CM000678.2"
    refseq_id: "NC_000016.10"
    length: 90338345
  chr17:
    chr: "17"
    genbank_id: "CM000679.2"
    refseq_id: "NC_000017.11"
    length: 83257441
  chr18:
    chr: "18"
    genbank_id: "CM000680.2"
    refseq_id: "NC_000018.10"
    length: 80373285
  chr19:
    chr: "19"
    genbank_id: "CM000681.2"
    refseq_id: "NC_000019.10"
    length: 58617616
  chr20:
    chr: "20"
    genbank_id: "CM000682.2"
    refseq_id: "NC_000020.11"
    length: 64444167
  chr21:
    chr: "21"
    genbank_id: "CM000683.2"
    refseq_id: "NC_000021.9"
    length: 46709983
  chr22:
    chr: "22"
    genbank_id: "CM000684.2"
    refseq_id: "NC_000022.11"
    length: 50818468
  chrX:
    chr: "X"
    genbank_id: "CM000685.2"
    refseq_id: "NC_000023.11"
    length: 156040895
  chrY:
    chr: "Y"
    genbank_id: "CM000686.2"
    refseq_id: "NC_000024.10"
    length: 57227415

variant_types:
  DUP:
    variant_state: EFO:0030070
    child_terms:
      - EFO:0030070
      - EFO:0030071
      - EFO:0030072
      - EFO:0030073
  EFO:0030070:
    variant_state: EFO:0030070
    child_terms:
      - EFO:0030070
      - EFO:0030071
      - EFO:0030072
      - EFO:0030073
  EFO:0030071:
    variant_state: EFO:0030071
    child_terms:
      - EFO:0030071
  EFO:0030072:
    variant_state: EFO:0030072
    child_terms:
      - EFO:0030072
      - EFO:0030073
  EFO:0030073:
    variant_state: EFO:0030073
    child_terms:
      - EFO:0030073
  DEL:
    variant_state: EFO:0030067
    child_terms:
      - EFO:0030067
      - EFO:0030068
      - EFO:0030069
  EFO:0030067:
    variant_state: EFO:0030067
    child_terms:
      - EFO:0030067
      - EFO:0030068
      - EFO:0030069
  EFO:0030068:
    variant_state: EFO:0030068
    child_terms:
      - EFO:0030068
  EFO:0030069:
    variant_state: EFO:0030069
    child_terms:
      - EFO:0030069

parameters:

  assemblyId:
    type: string
    pattern: '^\w+?[\w\-\.]*?\w*?$' # for 2019-nCoV
    default: GRCh38

  referenceName:
    type: string
    pattern: '^\w+?[\w\-]*?\w*?$' # for 2019-nCoV

  mateName:
    type: string
    pattern: '^([1-9]|1\d|2[0-4]|[XY]|MT)$'

  referenceBases:
    type: string
    pattern: '^[ACGTN]+$'

  alternateBases:
    type: string
    pattern: '^[ACGTN]+$'

  variantType:
    type: array
    items:
      type: string
      pattern: '^((:?EFO:\d+)|(:?DUP)|(:?DEL)|(:?BND)|(:?LOH)|(:?INS)|(:?INV)|(:?CNV)|(:?INDEL)|(:?SNP)|(:?SNV))$'

  start:
    type: array
    items:
      type: integer
      pattern: '^\d+?$'

  end:
    type: array
    items:
      type: integer
      pattern: '^\d+?$'

# custom parameters

  _id:
    type: string
    pattern: '^[a-fA-F\d]{24}$'
    description: >
      The internal object id, as string.

  id:
    type: string
    pattern: '^\w[\w\:\-\,]+?\w$'
    description: >
      A variant id, if existing in the database.

  variantId:
    type: string
    pattern: '^\w[\w\:>\-\,]+?\w$'
    description: >
      A variant_internal_id, defining a genomically distinct variant through it's "digest".

  varMinLength:
    type: integer
    pattern: '^\d+?$'
    description: >-
      The minimal length, in bases, of a genomic variant. This parameter can be applied to e.g. CNV queries.

  varMaxLength:
    type: integer
    pattern: '^\d+?$'
    description: >
      The maximal length, in bases, of a genomic variant. This parameter can be applied to e.g. CNV queries.

  geneSymbol:
    type: string
    pattern: '^\w+?(\w+?(\-\w+?)?)?$'

  cytoBands:
    pattern: ^(chro?)?([12]?[\dXY])([pq]((ter)|([1-4]([0-8](\.\d\d*?)?)?)?))?\-?([pq]((ter)|([1-4]([0-8](\.\d\d*?)?)?)?))?$
    type: string

  chroBases:
    pattern: ^(chro?)?([12]?[\dXY])\:(\d+?)(\-(\d+?))?$
    type: string

request_types:

  variantIdRequest:
    description: >
      A query for a specific variant by its `id` or internal `_id`.
    one_of:
      - id
      - _id
      - variantId

  variantDigestRequest:
    description: >
      A query for a specific variant by its `id` or internal `_id`.
    all_of:
      - digest

  variantCNVrequest:
    description: >
      This specific request allows for the bracketed search of genomic variants
      with start and end coordinates and a variant type. in contrast to a
      beaconRangeRequest, the start and end positions of the matched variants 
      have to fall into the (1 base or longer) intervals for start and end,
      respectively (while for the range request variants falling between start
      and end are being matched).
      `start` and `end` parameters are lists of 1 or 2 integers. The most common
      use here would be a use of 2 integers both for start and end, to allow
      fuzzy matching of CNVs and similar variants of imprecise length and
      position.
    all_of:
      - assemblyId
      - start
      - end
      - referenceName
      - variantType
    
  variantRangeRequest:
    description: |
      The beaconRangeRequest queries variants falling between start and end.
      `start` and `end` parameters should be single values.
    all_of:
      - assemblyId
      - start
      - end
      - referenceName
    optional:
      - variantType
      - referenceBases
      - alternateBases
      - varMinlength
      - varMaxLength
    
  variantAlleleRequest: 
    description: >
      This type corresponds to the original BeaconAlleleRequest, in which at a
      specified genome position a query looks for a combination of reference and
      replacement base(s).
    all_of:
      - assemblyId
      - start
      - referenceName
      - referenceBases
      - alternateBases

# custom

  variantFusionRequest:
    description: |
      This request is similar to the CNV request in using possibly fuzzy
      intervals for start and end of structural variants. However, here the
      "end" position refers to the fusion partner on the same or different
      chromosome as specified through "mateName".
      Conventions:
      * `mateName` can be the same or different to `referenceName`
      * `mateName` is the higher numbered/named chromosome
    all_of:
      - assemblyId
      - referenceName
      - mateName
      - start
      - end
    
  geneVariantRequest:
    description: >
      A variant overlapping with the genomic coordinates of a gene or other named sequence element.
    all_of:
      - geneSymbol
    optional:
      - variantType
      - referenceBases
      - alternateBases
      - varMinlength
      - varMaxLength

  cytobands2positions_request:
    all_of:
      - assemblyId
      - cytoBands
  
  positions2cytobands_request:
    all_of:
      - assemblyId
      - start
      - end
      - referenceName
      - rangeTag

  ChromosomeLocation:
    all_of:
      - type
      - species
      - chr
      - start
      - end





